{"version":3,"sources":["../routes.js"],"names":["router","Router","authRequired","req","res","next","user","session","oauth2return","originalUrl","redirect","addTemplateVariables","locals","profile","login","encodeURIComponent","logout","get","query","return","authenticate","scope","origin","userIp","headers","connection","remoteAddress","console","log","findById","params","id","m","render","content","creator","creatorName","findByCreatorId","json","username","displayName","messages","sendFile","join","__dirname","post","insert","body","expires","accesses","maxAccesses","creatorId","ipWhitelist","module","exports"],"mappings":"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","file":"routes.js","sourcesContent":["import express from 'express';\nimport passport from 'passport';\nimport path from 'path';\nimport { messages } from './database.js';\n\nconst router = express.Router();\n\n// For a good tutorial on passport.js, see:\n// - https://cloud.google.com/nodejs/getting-started/authenticate-users\n// Note: the above tutorial does not make it clear that this authentication method requires both the\n// Google+ Api and the Contacts Api be enabled.\n\n// Middleware that requires the user to be logged in. If the user is not logged\n// in, it will redirect the user to authorize the application and then return\n// them to the original URL they requested.\nconst authRequired = (req, res, next) => {\n    if (!req.user) {\n        req.session.oauth2return = req.originalUrl;\n        return res.redirect('/auth/login');\n    }\n    next();\n};\n\nconst addTemplateVariables = (req, res, next) => {\n    res.locals.profile = req.user;\n    res.locals.login = `/auth/login?return=${encodeURIComponent(req.originalUrl)}`;\n    res.locals.logout = `/auth/logout?return=${encodeURIComponent(req.originalUrl)}`;\n    next();\n};\n\nrouter.get('/auth/login', (req, res, next) => {\n    // If applicable, save the URL from which the user is navigating to login, to return after logging in.\n    if (req.query.return) {\n        req.session.oauth2return = req.query.return;\n    }\n    next();\n}, passport.authenticate('google', { scope: ['email', 'profile'] }));\n\nrouter.get('/auth/google/callback', passport.authenticate('google'), (req, res) => {\n    const origin = req.session.oauth2return || '/admin';\n    delete req.session.oauth2return;\n    res.redirect(origin);\n});\n\nrouter.get('/auth/logout', (req, res) => {\n    req.logout();\n    res.redirect('/');\n});\n\n// TODO: consider requiring authentication to view a link.\nrouter.get('/view/:id', (req, res) => {\n    const userIp = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n    console.log(userIp);\n    messages.findById(req.params.id, userIp, m => {\n        if (m === 'forbidden') {\n            res.render('forbidden');\n        } else if (!m || !m.content) {\n            res.redirect(req.user ? '/admin' : '/');\n        } else {\n            res.render('message', {\n                content: m.content,\n                creator: m.creatorName || 'Anonymous'\n            });\n        }\n    });\n});\n\nrouter.get('/messages', authRequired, addTemplateVariables, (req, res) => {\n    messages.findByCreatorId(req.user.id, messages => {\n        res.json({\n            username: req.user.displayName,\n            messages: messages\n        });\n    });\n});\n\nrouter.get('/', (req, res) => {\n    res.render('index');\n});\n\nrouter.get('/admin', authRequired, addTemplateVariables, (req, res) => {\n    res.sendFile(path.join(__dirname, '/../client/build/', 'index.html'));\n});\n\n// Same as the admin panel, only it doesn't display a list of messages, because no one is logged in.\nrouter.get('/guest', (req, res) => {\n    res.sendFile(path.join(__dirname, '/../client/build/', 'index.html'));\n});\n\nrouter.post('/', (req, res) => {\n    messages.insert({\n        content: req.body.content,\n        expires: req.body.expires,\n        accesses: 0,\n        maxAccesses: req.body.maxAccesses || 1,\n        creatorName: req.user && req.user.displayName || 'Anonymous',\n        creatorId: req.user && req.user.id || 0, // Let 0 be the ID for Anonymous users.\n        ipWhitelist: req.body.ipWhitelist || []\n    }, id => {\n        if (!id) {\n            res.json({ content: 'Sorry, that message is too large. The content cannot be over 1 mega-byte.' });\n        } else {\n            res.json({\n                id: id,\n                content: req.body.content\n            });\n        }\n    });\n});\n\nmodule.exports.router = router;"]}