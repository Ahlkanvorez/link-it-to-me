{"version":3,"sources":["../index.js"],"names":["app","use","conf","JSON","parse","readFileSync","extractProfile","imageUrl","profile","photos","length","value","id","displayName","image","clientID","clientSecret","callbackURL","accessType","accessToken","refreshToken","callback","serializeUser","user","deserializeUser","obj","mongoUri","Promise","global","connect","req","res","next","db","connection","resave","saveUninitialized","secret","signed","set","json","urlencoded","extended","initialize","session","static","join","__dirname","status","send","err","console","error","response","port","log","listen"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\nimport session from 'express-session';\nimport path from 'path';\nimport bodyParser from 'body-parser';\nimport helmet from 'helmet';\nimport passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport fs from 'fs';\nimport mongoose from 'mongoose';\nimport { router } from './routes.js';\n\nconst app = express();\n\napp.use(helmet());\n\n// For a good tutorial on passport.js, see:\n// - https://cloud.google.com/nodejs/getting-started/authenticate-users\n// Note: the above tutorial does not make it clear that this authentication method requires both the\n// Google+ Api and the Contacts Api be enabled.\n\n//const GoogleStrategy = require('passport-google-oauth20').Strategy;\n\n// Synchronously load client id & secret from conf.json, to preserve order of initialization.\nconst conf = JSON.parse(fs.readFileSync('conf.json'));\n\nconst extractProfile = profile => {\n    let imageUrl = '';\n    if (profile.photos && profile.photos.length) {\n        imageUrl = profile.photos[0].value;\n    }\n    return {\n        id: profile.id,\n        displayName: profile.displayName,\n        image: imageUrl\n    };\n};\n\npassport.use(new GoogleStrategy({\n    clientID: conf['google-client-id'],\n    clientSecret: conf['google-client-secret'],\n    callbackURL: conf['google-oauth-callback'],\n    accessType: 'offline'\n}, (accessToken, refreshToken, profile, callback) => {\n    callback(null, extractProfile(profile));\n}));\n\npassport.serializeUser((user, callback) => {\n    callback(null, user);\n});\n\npassport.deserializeUser((obj, callback) => {\n    callback(null, obj);\n});\n\nconst mongoUri = conf['mongo-uri'];\nmongoose.Promise = global.Promise; // enable a non-deprecated promise library.\nmongoose.connect(mongoUri);\n\napp.use((req, res, next) => {\n    req.db = mongoose.connection;\n    next();\n});\n\napp.use(session({\n    resave: false,\n    saveUninitialized: false,\n    secret: conf['session-secret'],\n    signed: true\n}));\napp.set('view engine', 'pug');\napp.set('trust proxy', true);\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use('/', router);\n\n// Files for the compiled React app.\napp.use(express.static(path.join(__dirname, '/../client/build')));\n\n// Basic 404 handler\napp.use((req, res) => {\n    res.status(404).send('Not Found');\n});\n\n// Basic error handler\napp.use((err, req, res) => {\n    console.error(err);\n    // If our routes specified a specific response, then send that. Otherwise,\n    // send a generic message so as not to leak anything.\n    res.status(500).send(err.response || 'Something broke!');\n});\n\nconst port = 3001;\nconsole.log(`Listening on port ${port}`);\napp.listen(port);"]}