{"version":3,"sources":["../database.js"],"names":["messageSchema","content","String","expires","Date","accesses","Number","maxAccesses","creatorName","creatorId","ipWhitelist","Message","model","messages","isExpired","m","deleteExpiredMessages","find","err","console","log","forEach","remove","_id","$where","setTimeout","findByCreatorId","id","callback","map","filter","findById","userIp","message","length","ip","save","insert"],"mappings":"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","file":"database.js","sourcesContent":["import mongoose, { Schema } from  'mongoose';\n\nconst messageSchema = new Schema({\n    content: String,\n    expires: Date,\n    accesses: Number,\n    maxAccesses: Number,\n    creatorName: String,\n    creatorId: Number,\n    ipWhitelist: [String]\n});\n\nconst Message = mongoose.model('Message', messageSchema);\n\nconst messages = (() => {\n    const isExpired = m => (m.expires <= new Date() || m.accesses >= m.maxAccesses);\n\n    const deleteExpiredMessages = () => {\n        Message.find({}, (err, messages) => {\n            if (err) {\n                console.log(err);\n            }\n            messages.forEach(m => {\n                Message.remove({ _id: m._id }, err => {\n                    if (err) {\n                        console.log(err);\n                    }\n                    console.log(`Deleted expired message: ${m}`);\n                });\n            });\n        }).$where(function () {\n            return isExpired(this);\n        });\n    };\n    // Delete expired messages on startup.\n    deleteExpiredMessages();\n\n    // Delete expired messages every day.\n    setTimeout(deleteExpiredMessages, 1000 * 60 * 60 * 24);\n\n    return {\n        findByCreatorId: (id, callback) => {\n            Message.find({ creatorId: id }, (err, messages) => {\n                if (err) {\n                    console.log(err);\n                    callback();\n                }\n                messages.map(m => {\n                    if (isExpired(m)) {\n                        Message.remove({ _id: m._id }, err => {\n                            if (err) {\n                                console.log(err);\n                            }\n                        });\n                    }\n                });\n                callback(messages.filter(m => !isExpired(m)));\n            });\n        },\n        findById: (id, userIp, callback) => {\n            Message.findById(id, (err, message) => {\n                if (err) {\n                    console.log(err);\n                    callback();\n                } else if (!message) {\n                    callback();\n                } else if (isExpired(message)) {\n                    Message.remove({ _id : message._id }, err => {\n                        if (err) {\n                            console.log(err);\n                        }\n                    });\n                    callback();\n                } else {\n                    if (message.ipWhitelist && message.ipWhitelist.length > 0\n                            && !message.ipWhitelist.find(ip => ip === userIp)) {\n                        // If there is a non-empty whitelist, and the user requesting to view the message is not on\n                        // it, indicate they are forbidden from viewing it.\n                        callback('forbidden');\n                    } else {\n                        message.accesses += 1;\n                        message.save(err => {\n                            if (err) {\n                                console.log(err);\n                            }\n                            callback(message);\n                        });\n                    }\n                }\n            });\n        },\n        insert: (message, callback) => {\n            if (!message) {\n                callback();\n            } else if (message.content.length / 2 > 1024 * 1024) {\n                // If the size of the content (which is an array of 16 bit, i.e. 2 byte chars) is over 1 mb, do not\n                // put it in the database.\n                callback();\n            } else {\n                message.expires = new Date(message.expires);\n                const m = new Message(message);\n                m.save(err => {\n                    if (err) {\n                        console.log(err);\n                    }\n                });\n                callback(m._id);\n            }\n        }\n    };\n})();\n\nexport { Message, messages };"]}